plugins {
  id 'java-library'
  id 'com.google.protobuf' version '0.8.7'
}

def protobufVersion = '3.6.1'
def grpcVersion = '1.16.1'

dependencies {
  // These dependency is exported to consumers, that is to say found on their compile classpath.
  api "com.google.protobuf:protobuf-java:${protobufVersion}"
  api "io.grpc:grpc-protobuf:${grpcVersion}"
  api "io.grpc:grpc-stub:${grpcVersion}"
  compileOnly "javax.annotation:javax.annotation-api:1.2"

  // These dependency is used internally, and not exposed to consumers on their own compile classpath.
  // implementation "<package_name>"

  // Use JUnit test framework
  testImplementation 'junit:junit:4.12'
  testImplementation "io.grpc:grpc-testing:${grpcVersion}"
}

// In this section you declare where to find the dependencies of your project
repositories {
  // Use jcenter for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
}

protobuf {
  protoc {
    // The artifact spec for the Protobuf Compiler
    artifact = "com.google.protobuf:protoc:${protobufVersion}"
  }
  plugins {
    // Optional: an artifact spec for a protoc plugin, with "grpc" as
    // the identifier, which can be referred to in the "plugins"
    // container of the "generateProtoTasks" closure.
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      // Apply the "grpc" plugin whose spec is defined above, without
      // options. Note the braces cannot be omitted, otherwise the
      // plugin will not be added. This is because of the implicit way
      // NamedDomainObjectContainer binds the methods.
      grpc { }
    }
  }
}

test {
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
  }
}